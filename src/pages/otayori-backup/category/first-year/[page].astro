---
import Layout from "../../../../layouts/Layout.astro";
import OtayoriKv from "../../../../components/OtayoriKv.astro"
import SectionTitle from "../../../../components/SectionTitle.astro";
import OtayoriCategoryList from "../../../../components/blog/OtayoriCategoryList.astro";
import OtayoriCard from "../../../../components/blog/OtayoriCard.astro";
import OtayoriPagination from "../../../../components/blog/OtayoriPagination.astro"
import Cta from "../../../../components/Cta.astro";
import type { GetStaticPathsOptions } from 'astro';
import { getLimited } from "../../../../library/microcms";
import { CATEGORY_MAP } from "../../../../library/categories";
import { getAllOtayori } from "../../../../library/microcms";

const limited = await getLimited();

// thumbnailAltDate から年・月を取り出す
const date = new Date(limited.thumbnailAltDate);
const year = isNaN(date.getTime()) ? "" : date.getFullYear();
const month = isNaN(date.getTime()) ? "" : date.getMonth() + 1;

const { page } = Astro.props;

// 全件取得（ソート処理のため）
const allPosts = await getAllOtayori({
  fields: ["id", "title", "thumbnail", "thumbnailAlt", "category", "publishedAt", "customDate"],
  limit: 100,
});

// 指定カテゴリーのみにフィルタリング
const categorySlug = "firstYear";
const categoryName = CATEGORY_MAP[categorySlug];
const filteredPosts = allPosts.contents.filter(post =>
  post.category.includes(categoryName)
);

// ソート処理（customDate優先）
const sortedPosts = filteredPosts.sort((a, b) => {
  const dateA = new Date(a.customDate || a.publishedAt);
  const dateB = new Date(b.customDate || b.publishedAt);
  return dateB.getTime() - dateA.getTime(); // 新しい順
});

// ページごとの投稿を取り出す
const postsPerPage = 8;
const start = (page.currentPage - 1) * postsPerPage;
const end = start + postsPerPage;
const posts = sortedPosts.slice(start, end);

// 動的ルートの生成
export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
  const allOtayori = await getAllOtayori({
    fields: ["id", "title", "thumbnail", "thumbnailAlt", "category", "publishedAt", "customDate"],
    limit: 100,
  });

  // 指定カテゴリーのみにフィルタリング
  const categorySlug = "firstYear";
  const categoryName = CATEGORY_MAP[categorySlug];
  const filtered = allOtayori.contents.filter(post =>
    post.category.includes(categoryName)
  );

  // 同様にソート
  const sorted = filtered.sort((a, b) => {
    const dateA = new Date(a.customDate || a.publishedAt);
    const dateB = new Date(b.customDate || b.publishedAt);
    return dateB.getTime() - dateA.getTime();
  });

  return paginate(sorted, { pageSize: 8 });
};
---

<Layout
  title="保護者さま限定ページ「おたより」（ログインが必要です）｜習志野市の幼稚園｜みもみ幼稚園"
  ogType="website"
  description="このページはみもみ幼稚園の在園児保護者向けの情報共有ページです。閲覧にはパスワードが必要です。"
  noIndex="true"
>
  <!-- otayori-list-kv -->
  <div class="otayori-list-kv">
    <OtayoriKv />
  </div><!-- /.otayori-list-kv -->

  <main class="otayori-list-main l-section-body">
    <div class="l-container-s">
      <div class="otayori-list-head">
        <div class="otayori-list-head-title">
          <SectionTitle
          title1="今月の園だより"
          />
        </div><!-- /.otayori-list-head-title -->
        <div class="otayori-list-head-content">
          <div class="otayori-list-head-description">
            <div class="otayori-list-head-text">
              <p class="otayori-list-head-paragraph">園だより」は、毎月の行事や活動予定、配布物、大切なお知らせやお願いごとなどをまとめたお便りです。</p>
              <p class="otayori-list-head-paragraph">必要なときにすぐご確認いただけるよう、ホームページにも掲載しております。</p>
              <p class="otayori-list-head-paragraph">毎月、月末に更新予定です。</p>
            </div><!-- /.otayori-list-head-text -->
            <div class="otayori-list-head-button">
              <a href={`/otayori/${limited.slug}`} class="faq-link faq-link--otayori">今月の園だよりを見る</a>
            </div><!-- /.otayori-list-head-button -->
          </div><!-- /.otayori-list-head-description -->
          {limited.thumbnail && (
            <div class="otayori-list-head-image">
              <img
                src={`${limited.thumbnail.url}?fm=webp`}
                alt={`園だより${year}年${month}月号の画像`}
                loading="eager"
                decoding="async"
                width="537"
                height="380"
              >
            </div>
          )}
        </div><!-- /.otayori-list-head-content -->
      </div>
      <div class="otayori-list-category-filter">
        <OtayoriCategoryList activeCategory="年少クラス" />
      </div>
      <ul class="otayori-list-list">
        {
          posts.length > 0 ? (
            posts.map((item) => (
              <li class="otayori-list-item">
                <OtayoriCard
                  id={item.id}
                  title={item.title}
                  thumbnail={item.thumbnail?.url}
                  thumbnailAlt={item.thumbnailAlt}
                  customDate={item.customDate}
                  publishedAt={item.publishedAt}
                  category={item.category}
                />
              </li>
            ))
          ) : (
            <li class="otayori-list-item">
              <p>現在、表示できる記事がありません。</p>
            </li>
          )
        }
      </ul>
      <div class="otayori-list-pagination">
        <OtayoriPagination
          currentPage={page.currentPage}
          lastPage={page.lastPage}
          category="first-year"
        />
      </div>
    </div>
  </main>

  <div class="otayori-list-cta">
    <Cta />
  </div><!-- /.otayori-list-cta -->
</Layout>

<style lang="scss">
  @use '../../../../styles/breakpoints' as *;

  .otayori-list-kv {
    padding-top: 20px;
    margin-top: 48px;
  }

  .otayori-list-main {
  }

  .otayori-list-head {

  }

  .otayori-list-head-title {

  }

  .otayori-list-head-content {
    display: flex;
    flex-direction: column-reverse;
    gap: 20px;
    margin-top: 20px;
    line-height: 1.5;
  }

  .otayori-list-head-description {

  }

  .otayori-list-head-text {
    display: grid;
    gap: 1em;
  }

  .otayori-list-head-paragraph {

  }

  .otayori-list-head-button {
    padding-right: 20px;
    margin-top: 20px;
    text-align: right;
    // .otayori-list-head-button .faq-linkは_faq-item.scssでスタイリング
  }

  .otayori-list-head-image {

  }

  .otayori-list-category-filter {
    margin-top: 60px;
  }

  .otayori-list-category-filter-item {
  }

  .otayori-list-list {
    display: grid;
    gap: 20px;
    margin-top: 40px;
  }

  .otayori-list-item {
    &:not(:last-child) {
      padding-bottom: 20px;
      border-bottom: 1px solid;
    }
  }

  .otayori-list-pagination {
    margin-top: 60px;
  }

  .otayori-list-cta {
    margin-top: 60px;
  }


  @include mq() {
    .otayori-list-kv {
      margin-top: 100px;
    }

    .otayori-list-main {

    }

    .otayori-list-head {

    }

    .otayori-list-head-title {

    }

    .otayori-list-head-content {
      flex-direction: row-reverse;
      align-items: center;
      gap: 30px;
      margin-top: 30px;
    }

    .otayori-list-head-description {

    }

    .otayori-list-head-text {

    }

    .otayori-list-head-paragraph {

    }

    .otayori-list-head-button {
      padding-right: 28px;
      // .otayori-list-head-button .faq-linkは_faq-item.scssでスタイリング
    }


    .otayori-list-head-image {

    }

    .otayori-list-category-filter {
      margin-top: 120px;
    }

    .otayori-list-category-filter-item {
    }

    .otayori-list-list {
      margin-top: 60px;
    }

    .otayori-list-cta {
      margin-top: 120px;
    }
  }
</style>
